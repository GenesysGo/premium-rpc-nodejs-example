# nginx.vh.default.conf  --  docker-openresty
#
# This file is installed to:
#   `/etc/nginx/conf.d/default.conf`
#
# It tracks the `server` section of the upstream OpenResty's `nginx.conf`.
#
# This config (and any other configs in `etc/nginx/conf.d/`) is loaded by
# default by the `include` directive in `/usr/local/openresty/nginx/conf/nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

server {
    
    listen 80;
    listen [::]:80;

    server_name knoxyproxy.juicystake.io;
    server_tokens off;

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://knoxyproxy.juicystake.io$request_uri;
    }
}

server {
    listen 443 default_server ssl http2;
    listen [::]:443 ssl http2;

    server_name knoxyproxy.juicystake.io;

    ssl_certificate /etc/nginx/ssl/live/knoxyproxy.juicystake.io/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/knoxyproxy.juicystake.io/privkey.pem;
    
    location /rpc {
    	resolver 127.0.0.11 ipv6=off;
        set $endpoint "https://us-west-1.genesysgo.net/abc-123-456";
        set $token '';
        access_by_lua_block {
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeouts(1000,1000,1000)
            -- connect
            local ok, err = red:connect("redis", 6379)
            if not ok then
                ngx.say("failed to connect to redis: ", err)
                return
            end
            local res, err = red:auth("tLnepVNpNdXk4o9NoEzd4cogN3LoLu4U")
            if not res then
                ngx.say("error authenticating: ", err)
                return
            end
            local res, err = red:get("RPC_TOKEN")
            if not res then
                ngx.say("error getting token: ", err)
                return
            end
            ngx.var.token = res
            local ok, err = red:set_keepalive(10000, 100)
            if not ok then
                ngx.say("failed to set keepalive: ", err)
                return
            end
        }
        proxy_set_header Authorization "Bearer ${token}";
        proxy_ssl_server_name on;
        proxy_pass $endpoint;
    }
    
    location / {
        root   /usr/local/openresty/nginx/html;
        index  index.html index.htm;
    }
}
